generator client {
  provider = "prisma-client-js"
  output   = "../apps/api/node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id             String     @id @default(uuid())
  name           String
  teams          Team[]
  services       Service[]
  incidents      Incident[]
  orgMemberships OrganizationMembership[]
}



model User {
  id              String                  @id @default(uuid())
  email           String                  @unique
  name            String?
  auth0Id         String                  @unique // <-- Add this line
  memberships     Membership[]
  orgMemberships  OrganizationMembership[]
}

model Team {
  id             String        @id @default(uuid())
  name           String
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id])
  memberships    Membership[]
}

model Membership {
  id     String   @id @default(uuid())
  user   User     @relation(fields: [userId], references: [id])
  userId String
  team   Team     @relation(fields: [teamId], references: [id])
  teamId String
  role   Role
}
model OrganizationMembership {
  id              String        @id @default(uuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  organization    Organization  @relation(fields: [organizationId], references: [id])
  organizationId  String
  role            OrgRole
}
enum Role {
  ADMIN
  MEMBER
  VIEWER
}
enum OrgRole {
  ORG_ADMIN
  ORG_MEMBER
  ORG_VIEWER
}

model Service {
  id             String          @id @default(uuid())
  name           String
  status         ServiceStatus
  organizationId String
  organization   Organization    @relation(fields: [organizationId], references: [id])
  incidents      Incident[]
  statusHistory  StatusHistory[]
  maintenances   Maintenance[]
}

enum ServiceStatus {
  OPERATIONAL
  DEGRADED
  PARTIAL_OUTAGE
  MAJOR_OUTAGE
}

model Incident {
  id             String           @id @default(uuid())
  title          String
  status         IncidentStatus
  serviceId      String
  service        Service          @relation(fields: [serviceId], references: [id])
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id])
  updates        IncidentUpdate[]
  createdAt      DateTime         @default(now())
  resolvedAt     DateTime?
}

enum IncidentStatus {
  OPEN
  RESOLVED
  SCHEDULED
}

model IncidentUpdate {
  id         String   @id @default(uuid())
  incidentId String
  incident   Incident @relation(fields: [incidentId], references: [id])
  message    String
  createdAt  DateTime @default(now())
}

model StatusHistory {
  id        String        @id @default(uuid())
  serviceId String
  service   Service       @relation(fields: [serviceId], references: [id])
  status    ServiceStatus
  changedAt DateTime      @default(now())
}

model Maintenance {
  id             String            @id @default(uuid())
  title          String
  description    String?
  status         MaintenanceStatus
  serviceId      String
  service        Service           @relation(fields: [serviceId], references: [id])
  scheduledStart DateTime
  scheduledEnd   DateTime
  createdAt      DateTime          @default(now())
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
